"""
OSM-Fetcher f√ºr die Verarbeitung von OSM-Daten.
"""

import geopandas as gpd
import logging
from pathlib import Path
from typing import Dict, Any, Optional, Union
from shapely.geometry import Polygon, MultiPolygon

from .osm.client import OSMClient
from .osm.geometry import OSMGeometry
from .osm.stream import OSMStream

logger = logging.getLogger(__name__)

def fetch_osm_buildings(
    polygon: Union[Polygon, MultiPolygon],
    output_dir: Optional[str] = None,
    config: Optional[Dict[str, Any]] = None
) -> Optional[gpd.GeoDataFrame]:
    """
    L√§dt Geb√§ude von OpenStreetMap.
    
    Args:
        polygon: Polygon f√ºr die Abfrage
        output_dir: Optionaler Ausgabepfad
        config: Optionale Konfiguration
        
    Returns:
        Optional[gpd.GeoDataFrame]: GeoDataFrame mit Geb√§uden
    """
    try:
        logger.info("üîÑ Verarbeite OSM-Geb√§ude")
        
        # Initialisiere Komponenten
        client = OSMClient(config)
        geometry = OSMGeometry()
        stream = OSMStream()
        
        # Validiere Geometrie
        if not geometry.validate_geometry(polygon):
            logger.error("‚ùå Ung√ºltiges Polygon")
            return None
            
        # Hole Geb√§ude von OSM
        buildings_data = client.get_buildings(polygon)
        if not buildings_data or not buildings_data.get('features'):
            logger.warning("‚ö†Ô∏è Keine OSM-Geb√§ude gefunden")
            return None
            
        # Konvertiere zu GeoDataFrame
        buildings_gdf = gpd.GeoDataFrame.from_features(
            buildings_data['features'],
            crs="EPSG:4326"
        )
        
        # Verarbeite Geometrien
        buildings_gdf.geometry = buildings_gdf.geometry.apply(
            lambda g: geometry.extract_footprint(g) if g else None
        )
        
        # Entferne ung√ºltige Geometrien
        buildings_gdf = buildings_gdf[buildings_gdf.geometry.apply(
            lambda g: geometry.validate_geometry(g) if g else False
        )]
        
        if buildings_gdf.empty:
            logger.warning("‚ö†Ô∏è Keine g√ºltigen Geb√§ude nach Verarbeitung")
            return None
            
        # Speichere Ergebnis
        if output_dir:
            output_path = Path(output_dir) / "buildings_osm.geojson"
            buildings_gdf.to_file(output_path, driver="GeoJSON")
            logger.info(f"‚úÖ Geb√§ude gespeichert: {output_path}")
            
        return buildings_gdf
        
    except Exception as e:
        logger.error(f"‚ùå Fehler bei der OSM-Geb√§ude Verarbeitung: {str(e)}")
        return None
        
def fetch_osm_streets(
    polygon: Union[Polygon, MultiPolygon],
    output_dir: Optional[str] = None,
    config: Optional[Dict[str, Any]] = None
) -> Optional[gpd.GeoDataFrame]:
    """
    L√§dt Stra√üen von OpenStreetMap.
    
    Args:
        polygon: Polygon f√ºr die Abfrage
        output_dir: Optionaler Ausgabepfad
        config: Optionale Konfiguration
        
    Returns:
        Optional[gpd.GeoDataFrame]: GeoDataFrame mit Stra√üen
    """
    try:
        logger.info("üîÑ Verarbeite OSM-Stra√üen")
        
        # Initialisiere Komponenten
        client = OSMClient(config)
        geometry = OSMGeometry()
        stream = OSMStream()
        
        # Validiere Geometrie
        if not geometry.validate_geometry(polygon):
            logger.error("‚ùå Ung√ºltiges Polygon")
            return None
            
        # Hole Stra√üen von OSM
        streets_data = client.get_streets(polygon)
        if not streets_data or not streets_data.get('features'):
            logger.warning("‚ö†Ô∏è Keine OSM-Stra√üen gefunden")
            return None
            
        # Konvertiere zu GeoDataFrame
        streets_gdf = gpd.GeoDataFrame.from_features(
            streets_data['features'],
            crs="EPSG:4326"
        )
        
        # Verarbeite Geometrien
        streets_gdf.geometry = streets_gdf.geometry.apply(
            lambda g: geometry.simplify_geometry(g) if g else None
        )
        
        # Entferne ung√ºltige Geometrien
        streets_gdf = streets_gdf[streets_gdf.geometry.apply(
            lambda g: geometry.validate_geometry(g) if g else False
        )]
        
        if streets_gdf.empty:
            logger.warning("‚ö†Ô∏è Keine g√ºltigen Stra√üen nach Verarbeitung")
            return None
            
        # Speichere Ergebnis
        if output_dir:
            output_path = Path(output_dir) / "streets_osm.geojson"
            streets_gdf.to_file(output_path, driver="GeoJSON")
            logger.info(f"‚úÖ Stra√üen gespeichert: {output_path}")
            
        return streets_gdf
        
    except Exception as e:
        logger.error(f"‚ùå Fehler bei der OSM-Stra√üen Verarbeitung: {str(e)}")
        return None 