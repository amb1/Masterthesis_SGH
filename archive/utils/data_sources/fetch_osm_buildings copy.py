import osmnx as ox
import geopandas as gpd
from shapely.ops import unary_union
from pathlib import Path
import yaml
import logging
import sys
import os
import overpy
from shapely.geometry import Polygon
from pyproj import Transformer
from pyproj import transform
import pandas as pd
from shapely.geometry import box
import numpy as np
from packaging import version

# F√ºge den Root-Pfad zum Python-Path hinzu
root_dir = str(Path(__file__).resolve().parent.parent.parent)
if root_dir not in sys.path:
    sys.path.append(root_dir)

from utils.config_loader import load_config

logger = logging.getLogger(__name__)

# Pr√ºfe osmnx Version
ox_version = version.parse(ox.__version__)

# Passe Overpass-Einstellungen an
ox.settings.overpass_max_query_area_size = 100_000_000  # Verdoppele die maximale Abfragegr√∂√üe
ox.settings.timeout = 180  # Erh√∂he Timeout auf 3 Minuten f√ºr gr√∂√üere Abfragen

def fetch_surrounding_buildings(site_gdf: gpd.GeoDataFrame, config: dict) -> gpd.GeoDataFrame:
    """Holt Geb√§ude aus OpenStreetMap im Umkreis des Standorts."""
    try:
        if site_gdf is None or site_gdf.empty:
            logger.error("‚ö†Ô∏è Ung√ºltiges oder leeres site_gdf √ºbergeben")
            return gpd.GeoDataFrame(geometry=[], crs="EPSG:4326")

        # Hole Konfigurationswerte
        buffer_distance = min(config.get('buildings', {}).get('buffer_distance', 100), 500)  # Begrenze auf 500m
        building_defaults = config.get('buildings', {}).get('defaults', {
            'height': 10,
            'floors': 3,
            'year': 1990
        })

        logger.info(f"üì° OSM-Abfrage: Geb√§ude im Umkreis von {buffer_distance}m")

        # Speichere urspr√ºngliches CRS
        original_crs = site_gdf.crs if site_gdf.crs else "EPSG:31256"

        # Stelle sicher, dass ein CRS vorhanden ist
        if not site_gdf.crs:
            site_gdf.set_crs(epsg=31256, inplace=True)

        # Erstelle Buffer f√ºr Suche
        site_polygon = site_gdf.geometry.iloc[0]
        search_area = site_polygon.buffer(buffer_distance)
        search_gdf = gpd.GeoDataFrame(geometry=[search_area], crs=site_gdf.crs)
        search_wgs84 = search_gdf.to_crs("EPSG:4326")
        
        # Extrahiere BBox f√ºr OSM-Abfrage
        minx, miny, maxx, maxy = search_wgs84.total_bounds
        logger.info(f"üó∫Ô∏è BBox f√ºr OSM-Abfrage: N={maxy}, S={miny}, E={maxx}, W={minx}")
        
        # Hole OSM-Geb√§ude
        buildings_gdf = fetch_osm_buildings((minx, miny, maxx, maxy), config)

        if buildings_gdf.empty:
            logger.warning("‚ö†Ô∏è Keine OSM-Geb√§ude gefunden!")
            return gpd.GeoDataFrame(
                columns=['Name', 'height_ag', 'floors_ag', 'category', 'REFERENCE', 'geometry'],
                geometry='geometry',
                crs=original_crs
            )

        # Konvertiere zum urspr√ºnglichen CRS
        buildings_gdf = buildings_gdf.to_crs(original_crs)

        # Filtere Geb√§ude: Nur die, die au√üerhalb des site_polygon aber innerhalb des Suchbereichs liegen
        buildings_gdf = buildings_gdf[
            ~buildings_gdf.geometry.intersects(site_polygon) &  # Nicht im site_polygon
            buildings_gdf.geometry.intersects(search_area)      # Im Suchbereich
        ]

        if buildings_gdf.empty:
            logger.warning("‚ö†Ô∏è Keine g√ºltigen Geb√§ude gefunden!")
            return gpd.GeoDataFrame(
                columns=['Name', 'height_ag', 'floors_ag', 'category', 'REFERENCE', 'geometry'],
                geometry='geometry',
                crs=original_crs
            )

        logger.info(f"‚úÖ OSM-Geb√§ude gefunden: {len(buildings_gdf)}")
        return buildings_gdf

    except Exception as e:
        logger.error(f"‚ùå Fehler beim OSM-Geb√§ude Abruf: {str(e)}")
        return gpd.GeoDataFrame(
            columns=['Name', 'height_ag', 'floors_ag', 'category', 'REFERENCE', 'geometry'],
            geometry='geometry',
            crs=original_crs if 'original_crs' in locals() else "EPSG:4326"
        )

def process_osm_buildings(buildings_gdf, osm_defaults):
    """
    Verarbeitet OSM-Geb√§ude und erstellt erforderliche Attribute
    """
    logger.info("üîÑ Verarbeite OSM-Geb√§ude")

    if buildings_gdf.empty:
        logger.warning("‚ö†Ô∏è Keine OSM-Geb√§ude zu verarbeiten!")
        return gpd.GeoDataFrame(geometry=[], crs=buildings_gdf.crs)

    processed_rows = []
    for i, row in buildings_gdf.iterrows():
        if not hasattr(row.geometry, 'exterior'):
            logger.warning(f"‚ö†Ô∏è Geb√§ude {i} √ºbersprungen: Keine Polygon-Geometrie")
            continue

        floors = row.get('building:levels', osm_defaults.get('default_floors', 3))
        try:
            floors = int(floors)
        except (ValueError, TypeError):
            floors = osm_defaults.get('default_floors', 3)

        processed_rows.append({
            'Name': f'OSM_{i}',
            'height_ag': floors * osm_defaults.get('floor_height', 3),
            'floors_ag': floors,
            'category': osm_defaults.get('category', 'residential'),
            'REFERENCE': osm_defaults.get('REFERENCE', ''),
            'geometry': row.geometry
        })

    processed_gdf = gpd.GeoDataFrame(processed_rows, crs=buildings_gdf.crs)
    logger.info(f"‚úÖ OSM-Geb√§ude verarbeitet: {len(processed_gdf)} Geb√§ude")
    return processed_gdf

def save_surrounding_buildings(buildings_gdf, output_path):
    """Speichert die Umgebungsgeb√§ude als Shapefile"""
    try:
        logger.info(f"üíæ Speichere OSM-Geb√§ude nach: {output_path}")
        buildings_gdf.to_file(output_path, driver='ESRI Shapefile')
        logger.info("‚úÖ Umgebungsgeb√§ude erfolgreich gespeichert")
    except Exception as e:
        logger.error(f"‚ùå Fehler beim Speichern der OSM-Geb√§ude: {str(e)}", exc_info=True)

def fetch_osm_buildings(bbox, config):
    """Holt Geb√§udedaten von OpenStreetMap"""
    try:
        logger.info(f"üîç Hole OSM-Geb√§ude mit {config}")
        
        # Validiere bbox Parameter
        if not isinstance(bbox, (tuple, list, np.ndarray)) or len(bbox) != 4:
            raise ValueError("‚ùå bbox muss ein Tupel oder Liste mit 4 Werten sein (minx, miny, maxx, maxy)")
            
        # Extrahiere BBox-Koordinaten
        minx, miny, maxx, maxy = bbox
        
        # Konvertiere zu OSM-Format (north, south, east, west)
        north = maxy  # max latitude
        south = miny  # min latitude
        east = maxx   # max longitude
        west = minx   # min longitude
        
        # Hole Tags aus der Konfiguration oder verwende Default
        tags = config.get('osm', {}).get('tags', {}).get('buildings', {'building': True})
        if isinstance(tags, list):
            tags = {'building': True}  # Fallback wenn tags eine Liste ist
        
        # Hole OSM-Geb√§ude entsprechend der osmnx Version
        if ox_version >= version.parse("1.3.0"):
            raw_result = ox.features_from_bbox(
                north, south, east, west,  # Direkte √úbergabe der Koordinaten
                tags=tags
            )
        else:
            raw_result = ox.features_from_bbox(
                north,  # max latitude
                south,  # min latitude
                east,   # max longitude
                west,   # min longitude
                tags
            )
        
        # Sicherheitscheck f√ºr R√ºckgabetyp
        if not isinstance(raw_result, gpd.GeoDataFrame):
            logger.warning("‚ö†Ô∏è OSM-Antwort ist kein GeoDataFrame ‚Äì vermutlich leer oder fehlerhaft")
            return gpd.GeoDataFrame(
                columns=['Name', 'height_ag', 'floors_ag', 'category', 'REFERENCE', 'geometry'],
                geometry='geometry',
                crs="EPSG:4326"
            )
            
        buildings_gdf = raw_result
        
        # Validiere Geometrien
        valid_mask = buildings_gdf.geometry.apply(lambda geom: geom.is_valid and hasattr(geom, 'exterior'))
        if not valid_mask.all():
            logger.warning(f"‚ö†Ô∏è {(~valid_mask).sum()} ung√ºltige Geometrien gefunden und entfernt")
            buildings_gdf = buildings_gdf[valid_mask]
        
        # Verarbeite die Geb√§ude
        if not buildings_gdf.empty:
            # Verarbeite die Geb√§ude mit den Standardwerten aus der Konfiguration
            buildings_gdf = process_osm_buildings(buildings_gdf, config.get('osm', {}).get('buildings', {}).get('defaults', {}))
            logger.info(f"‚úÖ {len(buildings_gdf)} OSM-Geb√§ude gefunden")
            return buildings_gdf
            
        logger.warning("‚ö†Ô∏è Keine OSM-Geb√§ude gefunden!")
        return gpd.GeoDataFrame(geometry=[], crs="EPSG:4326")
        
    except Exception as e:
        logger.error(f"‚ùå Fehler beim OSM-Geb√§ude Abruf: {str(e)}")
        return gpd.GeoDataFrame(geometry=[], crs="EPSG:4326")

def main():
    try:
        logger.info("üöÄ Starte OSM-Geb√§ude Abruf...")
        
        # Lade Projekt-Konfiguration
        root_dir = Path(__file__).resolve().parent.parent.parent
        project_config_path = root_dir / 'cfg' / 'project_config.yml'
        logger.info(f"üìÇ Lade Projekt-Konfiguration: {project_config_path}")
        project_config = load_config(project_config_path)
        
        if not project_config:
            raise ValueError("‚ùå Keine g√ºltige Projekt-Konfiguration gefunden")

        # Hole OSM-Konfigurationspfad aus project_config
        osm_config_path = project_config.get('project', {}).get('config_files', {}).get('osm', {}).get('config')
        
        if not osm_config_path:
            raise ValueError("‚ùå Kein OSM-Konfigurationspfad in project/config_files/osm/config gefunden")

        # Stelle sicher, dass der Pfad nicht doppelt 'local/' enth√§lt
        osm_config_path = Path(osm_config_path)

        # Falls der Pfad mit 'local/' beginnt, entferne es
        if osm_config_path.parts[0] == 'local':
            osm_config_path = osm_config_path.relative_to('local')

        # Konstruiere absoluten Pfad basierend auf root_dir
        osm_config_path = root_dir / osm_config_path
        
        logger.info(f"üìÇ Lade OSM-Konfiguration: {osm_config_path}")
        osm_config = load_config(osm_config_path)

        if not osm_config:
            raise ValueError("‚ùå Keine g√ºltige OSM-Konfiguration gefunden")

        # Hole Pfade aus der Projekt-Konfiguration
        paths = project_config.get('project', {}).get('paths', {})
        if not paths:
            raise ValueError("‚ùå Keine Pfade in der Projekt-Konfiguration gefunden")

        # Setze Pfade f√ºr Geometrie und Output
        geometry_path = Path(paths['outputs']['buildings'])
        site_path = geometry_path / 'site.shp'

        if not site_path.exists():
            raise FileNotFoundError(f"‚ùå site.shp nicht gefunden in {site_path}")

        # Hole Building-Defaults aus der OSM-Konfiguration
        building_defaults = osm_config.get('osm', {}).get('buildings', {}).get('defaults', {
            'height': 10,
            'floors': 3,
            'year': 1990,
            'category': 'residential',
            'REFERENCE': ''
        })

        # Hole Buffer-Distance aus der OSM-Konfiguration
        buffer_distance = osm_config.get('osm', {}).get('buildings', {}).get('buffer_distance', 100)

        site_gdf = gpd.read_file(site_path)
        osm_buildings = fetch_surrounding_buildings(site_gdf, buffer_distance)

        if osm_buildings.empty:
            logger.warning("‚ö†Ô∏è Keine OSM-Geb√§ude gefunden!")
            return

        processed_buildings = process_osm_buildings(osm_buildings, building_defaults)
        save_surrounding_buildings(processed_buildings, geometry_path / 'surroundings.shp')

        logger.info("‚úÖ OSM-Geb√§ude Abruf erfolgreich abgeschlossen!")

    except Exception as e:
        logger.error(f"‚ùå Fehler beim OSM-Geb√§ude Abruf: {str(e)}", exc_info=True)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
    main()
