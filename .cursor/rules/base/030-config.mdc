description: Konfiguration: Standardisierte Konfigurationsverwaltung und -validierung
globs: local/utils/config_loader.py,local/cfg/**/*.yml
alwaysApply: true

# Konfigurationsregeln

## Verzeichnisstruktur

```
local/cfg/
‚îú‚îÄ‚îÄ citygml/           # CityGML-spezifische Konfiguration
‚îú‚îÄ‚îÄ wfs/               # WFS-spezifische Konfiguration
‚îú‚îÄ‚îÄ osm/               # OSM-spezifische Konfiguration
‚îú‚îÄ‚îÄ cea/               # CEA-spezifische Konfiguration
‚îî‚îÄ‚îÄ logging/           # Logging-Konfiguration
```

## YAML-Standards

### Syntax und Formatierung
- UTF-8 Kodierung verwenden
- 2 Leerzeichen f√ºr Einr√ºckung
- Keine Tabs verwenden
- Kommentare mit `#` beginnen
- Listen mit `-` markieren
- Schl√ºssel in `snake_case` schreiben
- Strings nur bei Bedarf in Anf√ºhrungszeichen (Sonderzeichen, Mehrzeiligkeit)

### Datentypen
- Strings: Mit/ohne Anf√ºhrungszeichen je nach Inhalt
- Zahlen: Ohne Anf√ºhrungszeichen
- Boolean: true/false (lowercase)
- Listen: Mit Bindestrichen
- Dictionaries: Mit Einr√ºckung
- Python-Code als String definieren

### Namespaces und URLs
- XML/GML Namespaces vollst√§ndig definieren
- Namespace-Pr√§fixe konsistent verwenden
- URLs ohne Anf√ºhrungszeichen wenn m√∂glich

## Grundstruktur

```yaml
# Modul-Identifikation
module: citygml
version: 1.0

# Hauptkonfiguration
config:
  input:
    directory: data/raw/citygml
    file_pattern: "*.gml"
    encoding: utf-8
  
  processing:
    namespaces:
      bldg: http://www.opengis.net/citygml/building/1.0
      gml: http://www.opengis.net/gml
    
    fields:
      required:
        - measured_height
        - building_type
      
      citygml:
        measured_height:
          xpath: ".//bldg:measuredHeight"
          type: float
          fallback: null
  
  output:
    formats:
      - type: geojson
        directory: data/processed/geojson
        options:
          encoding: utf-8

# Optionale Erweiterungen
extensions:
  geometry:
    srs_name: EPSG:31256
    min_area: 10.0
    validate: true
```

## Validierung

- Syntaxpr√ºfung durchf√ºhren
- Pflichtfelder validieren
- Datentypen √ºberpr√ºfen
- XPath-Ausdr√ºcke testen
- Pfade auf Existenz pr√ºfen

## Fehlerbehandlung

- Sinnvolle Standardwerte definieren
- Fehlende Werte protokollieren
- Typkonvertierung absichern
- Validierungsfehler melden

## Versionierung

- Konfigurationsversionen dokumentieren
- √Ñnderungen nachvollziehbar machen
- Abw√§rtskompatibilit√§t beachten
- Migration unterst√ºtzen

## Konfigurationsverwaltung

### Laden der Konfiguration

```python
def load_config(config_path: str) -> Dict[str, Any]:
    """L√§dt und validiert eine Konfigurationsdatei.
    
    Args:
        config_path: Pfad zur Konfigurationsdatei
        
    Returns:
        Dict mit validierter Konfiguration
        
    Raises:
        ConfigError: Bei Lade- oder Validierungsfehlern
    """
```

### Validierung

```python
def validate_config(config: Dict[str, Any], schema: Dict[str, Any]) -> bool:
    """Validiert eine Konfiguration gegen ein Schema.
    
    Args:
        config: Zu validierende Konfiguration
        schema: JSON-Schema f√ºr Validierung
        
    Returns:
        True wenn valid, sonst False
    """
```

## Fehlerbehandlung

1. Datei-Fehler:
   - Nicht existierende Datei
   - Ung√ºltige Kodierung
   - Syntax-Fehler

2. Validierungs-Fehler:
   - Fehlende Pflichtfelder
   - Ung√ºltige Datentypen
   - Ung√ºltige Werte

3. Pfad-Fehler:
   - Relative vs. absolute Pfade
   - Nicht existierende Verzeichnisse
   - Zugriffsrechte

```python
class ConfigError(Exception):
    """Basis-Klasse f√ºr Konfigurationsfehler"""
    pass

class ConfigValidationError(ConfigError):
    """Fehler bei der Konfigurationsvalidierung"""
    pass

class ConfigFileError(ConfigError):
    """Fehler beim Laden der Konfigurationsdatei"""
    pass
```

## Testabdeckung

### Unit Tests

```python
def test_load_config():
    """Test des Konfigurationsladens"""
    config = load_config("test_config.yml")
    assert isinstance(config, dict)
    assert "module" in config
    assert "version" in config

def test_validate_config():
    """Test der Konfigurationsvalidierung"""
    assert validate_config(valid_config, schema)
    assert not validate_config(invalid_config, schema)
```

### Integrationstests

```python
def test_config_integration():
    """Test der Konfigurationsintegration"""
    processor = CityGMLProcessor("citygml_config.yml")
    assert processor.config is not None
    assert processor.config["input"]["directory"]
```

## Abh√§ngigkeiten

- [Logging](mdc:030-logging.mdc)

## Erweiterbarkeit

Neue Konfigurationsmodule m√ºssen:

1. Ein definiertes Schema haben
2. In der Verzeichnisstruktur organisiert sein
3. Validierungsregeln implementieren
4. Tests besitzen

## Best Practices

1. Konfigurationsdateien:
   - Versionierung
   - Dokumentation
   - Beispiele
   - Schema-Definition

2. Validierung:
   - Fr√ºhe Validierung
   - Klare Fehlermeldungen
   - Fallback-Werte
   - Typ-Konvertierung

3. Wartung:
   - Regelm√§√üige Schema-Updates
   - Migrations-Skripte
   - Changelog
   - Backup-Strategie

# Konfigurationsmanagement
description: Regeln f√ºr das Konfigurationsmanagement
globs: config/**/*.yml

## üîÅ Verweise statt Wiederholungen
- Wenn eine Konfiguration bereits in einer spezifischen Datei (z.B. `config/osm/config.yml`) definiert ist,
  darf sie **nicht** zus√§tzlich direkt in `global.yml` erscheinen.

## üîó Strukturierte Referenzierung
- `global.yml` enth√§lt **nur Verweise** (z.B. `config_files:`-Block).
- Beim Zugriff auf Konfigurationswerte sind diese per `load_config` zu **resolven**.

## üìÅ Dateiorganisation
- Jedes Modul hat eine eigene Konfigurationsdatei im entsprechenden Unterverzeichnis.
- Die Konfigurationsdatei enth√§lt alle modulspezifischen Einstellungen.
- Gemeinsam genutzte Einstellungen geh√∂ren in die `global.yml`.

## üîÑ Konfigurationsstruktur
- Modulspezifische Konfigurationen haben einen eindeutigen Top-Level-Key (z.B. `osm:`).
- Unterstrukturen folgen einer klaren Hierarchie:
  - `defaults:` f√ºr Standardwerte
  - `output:` f√ºr Ausgabeformate
  - `validation:` f√ºr Validierungsregeln
  - etc.

## üß™ Testen
- Neue Konfigurationen m√ºssen mit dem `ConfigManager` getestet werden.
- Verwende `load_config()` mit rekursivem Merge f√ºr verschachtelte Konfigurationen.
- Stelle sicher, dass alle erforderlichen Werte verf√ºgbar sind. 